/*
 * Copyright 2023 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

syntax = "proto3";

package mobility;

import "eigenmath/eigenmath.proto";

// MultichannelCloudProto implements an organized (height > 1) or unorganized
// (height==1) point cloud, similar to a PCL point cloud. If the point cloud is
// organized, the 2D point adjacency is defined by the following index lookup:
// point[row * width + col]
// Unorganized point clouds have height equal to 1. In both cases, points.size()
// is width * height. Normals are optional, but if provided must have the same
// size as points. The normal indices correspond to the point indices with the
// same index for organized and unorganized point clouds. Invalid points/normals
// are represented by NaN's.
// NextID: 17
message MultichannelCloudProto {
  // Pose of the sensor in the point cloud frame. If the point cloud frame is
  // the sensor frame, this should be the identity
  eigenmath.Pose3dProto point_cloud_pose_sensor = 12;
  // Width of the point cloud
  int32 width = 3;
  // Height of the point cloud (unorganized point clouds have a height of 1)
  int32 height = 4;

  // (Required) Coordinates stored columnwise in xyzxyzxyz order.
  // Size: width * height * 3
  repeated float points_xyz = 7;
  // Point normals stored columnwise in xyzxyzxyz order.
  // Size: width * height * 3
  repeated float normals_xyz = 8;
  // Point intensities stored columnwise.
  // Size: width * height
  repeated float intensities = 9;
  // Point color values between 0 and 1 stored columnwise in rgbrgbrgb order.
  // Size: width * height * 3
  repeated float colors_rgb_f = 11;

  // Sensor origin (x,y,z) for each points on the [width * height] point cloud.
  // Coordinates stored columnwise in xyzxyzxyz order.
  // Size: width * height * 3.
  repeated float sensor_origins = 13;
  // Sensor attribute fields for each point on the [width * height] point cloud.
  // Size : width * height * 3  (due to each shot having up to 3 returns).
  repeated float return_pulse_widths = 14;
  repeated float return_intensities = 15;
  repeated float return_ranges = 16;
}
